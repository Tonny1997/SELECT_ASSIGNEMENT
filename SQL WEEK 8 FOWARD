


/*To determine that my tables were
uploaded successfully on MYSQL Workbench*/

SELECT * FROM 
netflix_titles;

SELECT * FROM 
social_media;

SELECT COUNT(time_spent)
FROM social_media;

SELECT COUNT(time_spent)
FROM social_media
WHERE age > 20;


--SQL SELECT

SELECT * FROM netflix_titles
LIMIT 3;

SELECT TOP 3 * FROM netflix_titles
WHERE Country='Mexico';

SELECT MIN(release_year)
FROM netflix_titles;


SELECT MAX(release_year)
FROM netflix_titles;


--SQL GROUP BY

SELECT MIN(release_year) AS Old_School, show_id
FROM netflix_titles
GROUP BY show_id;


SELECT COUNT(DISTINCT time_spent)
FROM social_media;

SELECT SUM(time_spent)
FROM social_media;
WHERE profession = 'software';


SELECT DISTINCT time_spent AS Distincttime_spent, platform,
FROM social_media;
SELECT AVG(release_year)
FROM netflix_titles
WHERE rating = 'TV-MA';


SELECT * FROM netflix_titles
WHERE release_year <> 2021;



SELECT * FROM 
netflix_titles
where country = 'Germany';


DELETE FROM netflix_titles
WHERE country='Germany';




SELECT time_spent,interests
FROM social_media
WHERE interests IS NULL;


SELECT director,title,cast
FROM netflix_titles
WHERE director IS NOT NULL;



UPDATE netflix_titles
SET director = 'Alfred Schmidt', title= 'Frankfurt'
WHERE cast = 'Midnight Mass';





SELET gender,platform,
FROM social_media
WHERE time_spent = 2;


--SQL ORDER BY

SELET gender,platform AS avenue
FROM social_media;
ORDER BY time_spent ASC;


WHERE time_spent = 2
ORDER BY platform DESC;


SELECT DISTINCT release_year AS Year
FROM netflix_titles;

SELECT *
FROM social_media
WHERE location = 'Australia' AND platform LIKE 'G%';

SELECT * FROM  netflix_titles
WHERE NOT Country = 'India';


SELECT * FROM netflix_titles
WHERE type = 'Move' AND country LIKE 'G%' OR director LIKE 'R%';


SELECT * FROM netflix_titles
WHERE release_year NOT BETWEEN 2015 AND 2020;


SELECT * FROM netflix_titles
WHERE listed_in NOT IN ('International TV Shows, Romantic TV Shows, TV Comedies', 'Children & Family Movies');



SELECT COUNT(age), platform
FROM  social_media
GROUP BY platform
ORDER BY COUNT(age) DESC;


SELECT COUNT(age), platform
FROM  social_media
GROUP BY platform
HAVING COUNT(age) > 5;


SELECT COUNT(age), platform
FROM social_media
GROUP BY platform
HAVING COUNT(age) > 5
ORDER BY COUNT(age) DESC;

--SQL INSERT INTO

INSERT INTO social_media (time_spent, interests , location, profession)
VALUES
('13', 'hiking', 'Kenya', 'Engineer')
('23', 'Farming', 'Uganda', 'Doctor')
('9', 'Travellinh', 'Seychelles', 'Guide');


--SQL JOIN

SELECT social_media.gender, netflix_titles.type, social_media.age
FROM social_media
INNER JOIN netflix_titles ON social_media.Country=netflix_titles.Country;


SELECT social_media.gender, netflix_titles.type, social_media.age
FROM social_media
LEFT JOIN netflix_titles ON social_media.Country=netflix_titles.Country
ORDER BY social_media.age;


SELECT social_media.gender, netflix_titles.type, social_media.age
FROM social_media
RIHT JOIN netflix_titles ON social_media.Country=netflix_titles.Country;



SELECT social_media.gender, netflix_titles.type, social_media.age
FROM social_media
FULL OUTER JOIN netflix_titles ON social_media.Country=netflix_titles.Country
ORDER BY social_media.age;


--To select distinct Countries from both tables

SELECT Country FROM social_media
UNION
SELECT Country FROM netflix_titles
ORDER BY Country;



--To selct from both tables including duplicate countries

SELECT Country FROM social_media
UNION ALL
SELECT Country FROM netflix_titles
ORDER BY Country;


-SQL ORDER BY

SELECT age, Country FROM social_media
WHERE Country='Germany'
UNION
SELECT age, Country FROM netflix_titles
WHERE Country='Germany'
ORDER BY age;


SELECT * INTO social_media
FROM netflix_titles
WHERE Country = 'Germany';



INSERT INTO social_media (age, City, Country)
SELECT age, City, Country FROM netflix_titles
WHERE Country='Australia';




--SQL CASE

SELECT show_id, release_year,
CASE
    WHEN release_year > 2018 THEN 'The quantity is greater than 2018'
    WHEN release_year = 2018 THEN 'The quantity is 2018'
    ELSE 'The release_year is under 2018'
END AS launch year
FROM netflix_titles;


--Using COALESCE() function

SELECT age * (time_spent + COALESCE(income, 0))
FROM Soial_media;


#Using SQl SELECT INT0

SELECT Country INTO social_media
FROM netflix_titles
ORDER BY Country;

--Example 2 of Using SQl SELECT INT0.COPPYING DATA INTO AN EXTERNAL DATAASE
SELECT type,release_year,duration INTO Social_media
FROM netflix_titles
GROUP BY Country;

SELECT * INTO netflix_titlesBackupdata
FROM netflix_titles;

SELECT type, Country INTO netflix_titlesBackupdata
FROM netflix_titles;


--copying data from one table into another in the same database

INSERT INTO Social_media (type, release_year, Country)
SELECT type, release_year, Country FROM netflix_titles
WHERE Country='Germany';

--CREATING/REPLACNG A VEW
CREATE OR REPLACE VIEW [USACustomers] AS
SELECT *FROM netflix_titles
WHERE Country = "United States";

--CREATING A PROCEDURE
CREATE PROCEDURE SelectAllCustomers
AS
SELECT * FROM netflix_titles
GO;

--CREATING A PROCEDURE on MYSQL Workbench
CREATE PROCEDURE SelectAllCustomers()
BEGIN
    SELECT * FROM netflix_titles;
END

DELIMITER ;


--QUERIES

--NESTED QUERIES
SELECT name
FROM employees
WHERE department_id = (SELECT department_id FROM departments
WHERE location_id = (SELECT location_id FROM locations
WHERE city = 'Nairobi'));



-/*Exists Subqueries.Testig existence of roews in a

subquery.uses (EXISTS ,NOT EXISTS)*/

SELECT name 
FROM employees 
WHERE EXISTS(SELECT 1 FROM departments WHERE manager_id 
= employees.employee_id);



--Scalar subqueries.returns a single value(single row and column)

SELECT name,(SELECT MAX(salary) FROM employees)
AS max_salary
FROM employees;


/*Single_row subqueries.Used with (=,>,<,>=,<=),
returns single row of results*/

SELECT name FROM employees WHERE salary = (SELECT MAX(salary)FROM employees);


/*Multiple-column subqueries.Returns more than one column of results.
Used in (FROM, SELECT nad WHERE clauses)*/

SELECT department_id,department_name
FROM departments
WHERE(department_id,location_id) IN 
(SELECT department_id,location_id FROM location);


DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `new_procedure`()
BEGIN SELECT * FROM netflix_titles
LIMIT 3;

END$$
DELIMITER ;
























